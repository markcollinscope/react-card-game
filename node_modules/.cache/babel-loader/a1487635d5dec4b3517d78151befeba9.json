{"ast":null,"code":"const URLBASE = 'https://deckofcardsapi.com/api/deck/';\nconst SHUFFLE = 'new/shuffle/?deck_count=1';\nconst DRAWONE = '/draw/?count=1';\n\nconst deckApiFetchJson = async request => {\n  let response = await fetch(URLBASE + request);\n  let json = await response.json();\n  if (!json.success) throw new Error(\"Fetch API Error - Bye!\"); // console.log(\"deckApiFetchJson:\", json);\n\n  return json;\n};\n\nclass DeckOfCards {\n  constructor() {\n    this.deckId = undefined;\n    this.lastCard = {\n      deck_id: \"abcd\"\n    };\n  }\n\n  doChecks(full = false) {\n    if (this.deckId === undefined || full && this.lastCard === undefined) throw new Error(\"DeckOfCard - must request newDeck() and draw()\");\n  }\n\n  async newDeck() {\n    let json = await deckApiFetchJson(SHUFFLE);\n    this.deckId = json.deck_id; // console.log(\"newDeck:\", this.deckId, this.lastCard);\n\n    return this.deckId;\n  }\n\n  async draw() {\n    doChecks(false);\n    this.lastCard = await deckApiFetchJson(this.deckId + DRAWONE);\n    return this.lastCard;\n  }\n\n}\n\nDeckOfCards.values = {\n  \"2\": 2,\n  \"3\": 3,\n  \"4\": 4,\n  \"5\": 5,\n  \"6\": 6,\n  \"7\": 7,\n  \"8\": 8,\n  \"9\": 9,\n  \"0\": 10,\n  \"JACK\": 10,\n  \"QUEEN\": 10,\n  \"KING\": 10,\n  \"ACE\": 11\n};\nlet deck = new DeckOfCards();\nexport default deck;","map":{"version":3,"sources":["/home/mark/GIT/GITHUB/react-card-game/src/cardapi.js"],"names":["URLBASE","SHUFFLE","DRAWONE","deckApiFetchJson","request","response","fetch","json","success","Error","DeckOfCards","deckId","undefined","lastCard","deck_id","doChecks","full","newDeck","draw","values","deck"],"mappings":"AAAA,MAAMA,OAAO,GAAG,sCAAhB;AACA,MAAMC,OAAO,GAAG,2BAAhB;AACA,MAAMC,OAAO,GAAG,gBAAhB;;AAEA,MAAMC,gBAAgB,GAAG,MAAOC,OAAP,IACzB;AACC,MAAIC,QAAQ,GAAG,MAAMC,KAAK,CAACN,OAAO,GAAGI,OAAX,CAA1B;AACA,MAAIG,IAAI,GAAG,MAAMF,QAAQ,CAACE,IAAT,EAAjB;AAEA,MAAI,CAAEA,IAAI,CAACC,OAAX,EAAoB,MAAM,IAAIC,KAAJ,CAAU,wBAAV,CAAN,CAJrB,CAMC;;AAEA,SAAOF,IAAP;AACA,CAVD;;AAYA,MAAMG,WAAN,CACA;AAAA;AAAA,SACCC,MADD,GACUC,SADV;AAAA,SAECC,QAFD,GAEY;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAFZ;AAAA;;AAoBCC,EAAAA,QAAQ,CAACC,IAAI,GAAC,KAAN,EAAa;AACpB,QAAK,KAAKL,MAAL,KAAgBC,SAAhB,IAA8BI,IAAI,IAAI,KAAKH,QAAL,KAAkBD,SAA7D,EACC,MAAM,IAAIH,KAAJ,CAAU,gDAAV,CAAN;AACD;;AAEY,QAAPQ,OAAO,GACb;AACC,QAAIV,IAAI,GAAG,MAAMJ,gBAAgB,CAACF,OAAD,CAAjC;AACA,SAAKU,MAAL,GAAcJ,IAAI,CAACO,OAAnB,CAFD,CAIC;;AAEA,WAAO,KAAKH,MAAZ;AACA;;AAES,QAAJO,IAAI,GACV;AACCH,IAAAA,QAAQ,CAAC,KAAD,CAAR;AACA,SAAKF,QAAL,GAAgB,MAAMV,gBAAgB,CAAC,KAAKQ,MAAL,GAAcT,OAAf,CAAtC;AACA,WAAO,KAAKW,QAAZ;AACA;;AAxCF;;AADMH,W,CAKES,M,GAAS;AACf,OAAK,CADU;AAEf,OAAK,CAFU;AAGf,OAAK,CAHU;AAIf,OAAK,CAJU;AAKf,OAAK,CALU;AAMf,OAAK,CANU;AAOf,OAAK,CAPU;AAQf,OAAK,CARU;AASf,OAAK,EATU;AAUf,UAAQ,EAVO;AAWf,WAAS,EAXM;AAYf,UAAQ,EAZO;AAaf,SAAO;AAbQ,C;AAuCjB,IAAIC,IAAI,GAAG,IAAIV,WAAJ,EAAX;AACA,eAAeU,IAAf","sourcesContent":["const URLBASE = 'https://deckofcardsapi.com/api/deck/'\nconst SHUFFLE = 'new/shuffle/?deck_count=1'\nconst DRAWONE = '/draw/?count=1'\n\nconst deckApiFetchJson = async (request) =>\n{\n\tlet response = await fetch(URLBASE + request);\n\tlet json = await response.json();\n\n\tif (! json.success) throw new Error(\"Fetch API Error - Bye!\");\n\t\n\t// console.log(\"deckApiFetchJson:\", json);\n\n\treturn json;\n}\n\nclass DeckOfCards \n{\n\tdeckId = undefined;\n\tlastCard = { deck_id: \"abcd\" };\n\n\tstatic values = {\n\t\t\"2\": 2,\n\t\t\"3\": 3,\n\t\t\"4\": 4,\n\t\t\"5\": 5,\n\t\t\"6\": 6,\n\t\t\"7\": 7,\n\t\t\"8\": 8,\n\t\t\"9\": 9,\n\t\t\"0\": 10,\n\t\t\"JACK\": 10,\n\t\t\"QUEEN\": 10,\n\t\t\"KING\": 10, \n\t\t\"ACE\": 11\n\t}\n\n\tdoChecks(full=false) {\n\t\tif ( this.deckId === undefined || (full && this.lastCard === undefined) )\n\t\t\tthrow new Error(\"DeckOfCard - must request newDeck() and draw()\");\n\t}\n\n\tasync newDeck()\n\t{\n\t\tlet json = await deckApiFetchJson(SHUFFLE);\n\t\tthis.deckId = json.deck_id;\n\t\t\n\t\t// console.log(\"newDeck:\", this.deckId, this.lastCard);\n\t\n\t\treturn this.deckId;\n\t}\n\n\tasync draw()\n\t{\n\t\tdoChecks(false)\n\t\tthis.lastCard = await deckApiFetchJson(this.deckId + DRAWONE);\n\t\treturn this.lastCard;\n\t}\n}\n\nlet deck = new DeckOfCards();\nexport default deck;\n"]},"metadata":{},"sourceType":"module"}