{"ast":null,"code":"import _classCallCheck from\"/home/mark/GIT/GITHUB/react-card-game/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _regeneratorRuntime from\"/home/mark/GIT/GITHUB/react-card-game/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/mark/GIT/GITHUB/react-card-game/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";// TODO import * as uts from './utils';\n// TODO await timeouts?\nimport Card from'card';var URLBASE='https://deckofcardsapi.com/api/deck/';var SHUFFLEONE='new/shuffle/?deck_count=1';var DRAWONE='/draw/?count=1';var deckApiFetchJson=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(request){var response,json;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return fetch(URLBASE+request);case 2:response=_context.sent;_context.next=5;return response.json();case 5:json=_context.sent;if(json.success){_context.next=8;break;}throw new Error(\"Fetch API Error - Bye!\");case 8:return _context.abrupt(\"return\",json);case 9:case\"end\":return _context.stop();}}},_callee);}));return function deckApiFetchJson(_x){return _ref.apply(this,arguments);};}();export var Deck=function Deck(){var _this=this;_classCallCheck(this,Deck);this.deckId=undefined;this.lastCard=undefined;this.doChecks=function(){var full=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;if(_this.deckId===undefined||full&&_this.lastCard===undefined)throw new Error(\"DeckOfCard - must request newDeck() and draw()\");};this.newDeck=/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var json;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return deckApiFetchJson(SHUFFLEONE);case 2:json=_context2.sent;_this.deckId=json.deck_id;// console.log(\"newDeck:\", this.deckId, this.lastCard);\nreturn _context2.abrupt(\"return\",_this.deckId);case 5:case\"end\":return _context2.stop();}}},_callee2);}));this.drawCard=/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(){return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_this.doChecks(false);_context3.t0=Card;_context3.next=4;return deckApiFetchJson(_this.deckId+DRAWONE);case 4:_context3.t1=_context3.sent;_this.lastCard=new _context3.t0(_context3.t1);return _context3.abrupt(\"return\",_this.lastcard);case 7:case\"end\":return _context3.stop();}}},_callee3);}));};","map":{"version":3,"sources":["/home/mark/GIT/GITHUB/react-card-game/src/Deck.js"],"names":["Card","URLBASE","SHUFFLEONE","DRAWONE","deckApiFetchJson","request","fetch","response","json","success","Error","Deck","deckId","undefined","lastCard","doChecks","full","newDeck","deck_id","drawCard","lastcard"],"mappings":"mdAAA;AACA;AAEA,MAAOA,CAAAA,IAAP,KAAiB,MAAjB,CAEA,GAAMC,CAAAA,OAAO,CAAK,sCAAlB,CACA,GAAMC,CAAAA,UAAU,CAAI,2BAApB,CACA,GAAMC,CAAAA,OAAO,CAAK,gBAAlB,CAEA,GAAMC,CAAAA,gBAAgB,0FAAG,iBAAOC,OAAP,0JAEHC,CAAAA,KAAK,CAACL,OAAO,CAAGI,OAAX,CAFF,QAEpBE,QAFoB,qCAGPA,CAAAA,QAAQ,CAACC,IAAT,EAHO,QAGpBA,IAHoB,kBAKlBA,IAAI,CAACC,OALa,8BAKE,IAAIC,CAAAA,KAAJ,CAAU,wBAAV,CALF,wCAOjBF,IAPiB,wDAAH,kBAAhBJ,CAAAA,gBAAgB,4CAAtB,CAUA,UAAaO,CAAAA,IAAb,gEAECC,MAFD,CAEUC,SAFV,MAGCC,QAHD,CAGYD,SAHZ,MAKCE,QALD,CAKY,UACX,IADYC,CAAAA,IACZ,2DADiB,KACjB,CACC,GAAK,KAAI,CAACJ,MAAL,GAAgBC,SAAhB,EAA8BG,IAAI,EAAI,KAAI,CAACF,QAAL,GAAkBD,SAA7D,CACC,KAAM,IAAIH,CAAAA,KAAJ,CAAU,gDAAV,CAAN,CACD,CATF,MAWCO,OAXD,sEAWW,wKAEQb,CAAAA,gBAAgB,CAACF,UAAD,CAFxB,QAELM,IAFK,gBAGT,KAAI,CAACI,MAAL,CAAcJ,IAAI,CAACU,OAAnB,CAEA;AALS,iCAOF,KAAI,CAACN,MAPH,0DAXX,QAqBCO,QArBD,sEAqBY,wIAEV,KAAI,CAACJ,QAAL,CAAc,KAAd,EAFU,aAIUf,IAJV,wBAIuBI,CAAAA,gBAAgB,CAAC,KAAI,CAACQ,MAAL,CAAcT,OAAf,CAJvC,oCAIV,KAAI,CAACW,QAJK,iEAKH,KAAI,CAACM,QALF,0DArBZ","sourcesContent":["// TODO import * as uts from './utils';\n// TODO await timeouts?\n\nimport Card from 'card';\n\nconst URLBASE \t\t= 'https://deckofcardsapi.com/api/deck/';\nconst SHUFFLEONE \t= 'new/shuffle/?deck_count=1';\nconst DRAWONE \t\t= '/draw/?count=1';\n\nconst deckApiFetchJson = async (request) =>\n{\n\tlet response = await fetch(URLBASE + request);\n\tlet json = await response.json();\n\n\tif (! json.success) throw new Error(\"Fetch API Error - Bye!\");\n\t\n\treturn json;\n}\n\nexport class Deck\n{\n\tdeckId = undefined;\n\tlastCard = undefined;\n\n\tdoChecks = (full=false)  =>\n\t{\n\t\tif ( this.deckId === undefined || (full && this.lastCard === undefined) )\n\t\t\tthrow new Error(\"DeckOfCard - must request newDeck() and draw()\");\n\t}\n\n\tnewDeck = async () =>\n\t{\n\t\tlet json = await deckApiFetchJson(SHUFFLEONE);\n\t\tthis.deckId = json.deck_id;\n\t\t\n\t\t// console.log(\"newDeck:\", this.deckId, this.lastCard);\n\t\n\t\treturn this.deckId;\n\t}\n\n\tdrawCard = async () =>\n\t{\n\t\tthis.doChecks(false);\n\n\t\tthis.lastCard = new Card ( await deckApiFetchJson(this.deckId + DRAWONE) );\n\t\treturn this.lastcard;\n\t}\n}\n\n"]},"metadata":{},"sourceType":"module"}