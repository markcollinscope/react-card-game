{"ast":null,"code":"import * as uts from './utils';\nconst URLBASE = 'https://deckofcardsapi.com/api/deck/';\nconst SHUFFLE = 'new/shuffle/?deck_count=1';\nconst DRAWONE = '/draw/?count=1';\n\nconst deckApiFetchJson = async request => {\n  let response = await fetch(URLBASE + request);\n  let json = await response.json();\n  if (!json.success) throw new Error(\"Fetch API Error - Bye!\"); // console.log(\"deckApiFetchJson:\", json);\n\n  return json;\n};\n\nexport class Card {\n  constructor(c) {\n    this.image = () => this.image;\n\n    this.value = () => this.value;\n\n    this.suit = () => this.suit;\n\n    this.code = () => this.code;\n\n    this.image = assertHasValue(c.image);\n    this.value = assertHasValue(c.value);\n    this.suit = assertHasValue(c.suit);\n    this.code = assertHasValue(c.code);\n  }\n\n}\nexport class Deck {\n  constructor() {\n    this.deckId = undefined;\n    this.lastCard = {\n      deck_id: \"abcd\"\n    };\n\n    this.doChecks = (full = false) => {\n      if (this.deckId === undefined || full && this.lastCard === undefined) throw new Error(\"DeckOfCard - must request newDeck() and draw()\");\n    };\n\n    this.newDeck = async () => {\n      let json = await deckApiFetchJson(SHUFFLE);\n      this.deckId = json.deck_id; // console.log(\"newDeck:\", this.deckId, this.lastCard);\n\n      return this.deckId;\n    };\n  }\n\n  async drawCard() {\n    this.doChecks(false);\n    this.lastCard = new Card(await deckApiFetchJson(this.deckId + DRAWONE));\n    return;\n  }\n\n}\nDeck.values = {\n  \"2\": 2,\n  \"3\": 3,\n  \"4\": 4,\n  \"5\": 5,\n  \"6\": 6,\n  \"7\": 7,\n  \"8\": 8,\n  \"9\": 9,\n  \"0\": 10,\n  \"JACK\": 10,\n  \"QUEEN\": 10,\n  \"KING\": 10,\n  \"ACE\": 11\n};","map":{"version":3,"sources":["/home/mark/GIT/GITHUB/react-card-game/src/cardapi.js"],"names":["uts","URLBASE","SHUFFLE","DRAWONE","deckApiFetchJson","request","response","fetch","json","success","Error","Card","constructor","c","image","value","suit","code","assertHasValue","Deck","deckId","undefined","lastCard","deck_id","doChecks","full","newDeck","drawCard","values"],"mappings":"AAAA,OAAO,KAAKA,GAAZ,MAAqB,SAArB;AAEA,MAAMC,OAAO,GAAG,sCAAhB;AACA,MAAMC,OAAO,GAAG,2BAAhB;AACA,MAAMC,OAAO,GAAG,gBAAhB;;AAEA,MAAMC,gBAAgB,GAAG,MAAOC,OAAP,IACzB;AACC,MAAIC,QAAQ,GAAG,MAAMC,KAAK,CAACN,OAAO,GAAGI,OAAX,CAA1B;AACA,MAAIG,IAAI,GAAG,MAAMF,QAAQ,CAACE,IAAT,EAAjB;AAEA,MAAI,CAAEA,IAAI,CAACC,OAAX,EAAoB,MAAM,IAAIC,KAAJ,CAAU,wBAAV,CAAN,CAJrB,CAMC;;AAEA,SAAOF,IAAP;AACA,CAVD;;AAYA,OAAO,MAAMG,IAAN,CAAW;AACjBC,EAAAA,WAAW,CAACC,CAAD,EACX;AAAA,SAOAC,KAPA,GAOQ,MAAM,KAAKA,KAPnB;;AAAA,SAQAC,KARA,GAQQ,MAAM,KAAKA,KARnB;;AAAA,SASAC,IATA,GASO,MAAM,KAAKA,IATlB;;AAAA,SAUAC,IAVA,GAUO,MAAM,KAAKA,IAVlB;;AACC,SAAKH,KAAL,GAAaI,cAAc,CAACL,CAAC,CAACC,KAAH,CAA3B;AACM,SAAKC,KAAL,GAAaG,cAAc,CAACL,CAAC,CAACE,KAAH,CAA3B;AACA,SAAKC,IAAL,GAAYE,cAAc,CAACL,CAAC,CAACG,IAAH,CAA1B;AACA,SAAKC,IAAL,GAAYC,cAAc,CAACL,CAAC,CAACI,IAAH,CAA1B;AACN;;AAPgB;AAelB,OAAO,MAAME,IAAN,CACP;AAAA;AAAA,SACCC,MADD,GACUC,SADV;AAAA,SAECC,QAFD,GAEY;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAFZ;;AAAA,SAoBCC,QApBD,GAoBY,CAACC,IAAI,GAAC,KAAN,KACX;AACC,UAAK,KAAKL,MAAL,KAAgBC,SAAhB,IAA8BI,IAAI,IAAI,KAAKH,QAAL,KAAkBD,SAA7D,EACC,MAAM,IAAIX,KAAJ,CAAU,gDAAV,CAAN;AACD,KAxBF;;AAAA,SA0BCgB,OA1BD,GA0BW,YACV;AACC,UAAIlB,IAAI,GAAG,MAAMJ,gBAAgB,CAACF,OAAD,CAAjC;AACA,WAAKkB,MAAL,GAAcZ,IAAI,CAACe,OAAnB,CAFD,CAIC;;AAEA,aAAO,KAAKH,MAAZ;AACA,KAlCF;AAAA;;AAoCe,QAARO,QAAQ,GACd;AACC,SAAKH,QAAL,CAAc,KAAd;AAEA,SAAKF,QAAL,GAAgB,IAAIX,IAAJ,CAAW,MAAMP,gBAAgB,CAAC,KAAKgB,MAAL,GAAcjB,OAAf,CAAjC,CAAhB;AACA;AACA;;AA1CF;AADagB,I,CAKLS,M,GAAS;AACf,OAAK,CADU;AAEf,OAAK,CAFU;AAGf,OAAK,CAHU;AAIf,OAAK,CAJU;AAKf,OAAK,CALU;AAMf,OAAK,CANU;AAOf,OAAK,CAPU;AAQf,OAAK,CARU;AASf,OAAK,EATU;AAUf,UAAQ,EAVO;AAWf,WAAS,EAXM;AAYf,UAAQ,EAZO;AAaf,SAAO;AAbQ,C","sourcesContent":["import * as uts from './utils';\n\nconst URLBASE = 'https://deckofcardsapi.com/api/deck/'\nconst SHUFFLE = 'new/shuffle/?deck_count=1'\nconst DRAWONE = '/draw/?count=1'\n\nconst deckApiFetchJson = async (request) =>\n{\n\tlet response = await fetch(URLBASE + request);\n\tlet json = await response.json();\n\n\tif (! json.success) throw new Error(\"Fetch API Error - Bye!\");\n\t\n\t// console.log(\"deckApiFetchJson:\", json);\n\n\treturn json;\n}\n\nexport class Card {\n\tconstructor(c)\n\t{\n\t\tthis.image = assertHasValue(c.image);\n        this.value = assertHasValue(c.value);\n        this.suit = assertHasValue(c.suit);\n        this.code = assertHasValue(c.code);\n\t}\n\n\timage = () => this.image;\n\tvalue = () => this.value;\n\tsuit = () => this.suit;\n\tcode = () => this.code;\n}\n\nexport class Deck\n{\n\tdeckId = undefined;\n\tlastCard = { deck_id: \"abcd\" };\n\n\tstatic values = {\n\t\t\"2\": 2,\n\t\t\"3\": 3,\n\t\t\"4\": 4,\n\t\t\"5\": 5,\n\t\t\"6\": 6,\n\t\t\"7\": 7,\n\t\t\"8\": 8,\n\t\t\"9\": 9,\n\t\t\"0\": 10,\n\t\t\"JACK\": 10,\n\t\t\"QUEEN\": 10,\n\t\t\"KING\": 10, \n\t\t\"ACE\": 11\n\t}\n\n\tdoChecks = (full=false)  =>\n\t{\n\t\tif ( this.deckId === undefined || (full && this.lastCard === undefined) )\n\t\t\tthrow new Error(\"DeckOfCard - must request newDeck() and draw()\");\n\t}\n\n\tnewDeck = async () =>\n\t{\n\t\tlet json = await deckApiFetchJson(SHUFFLE);\n\t\tthis.deckId = json.deck_id;\n\t\t\n\t\t// console.log(\"newDeck:\", this.deckId, this.lastCard);\n\t\n\t\treturn this.deckId;\n\t}\n\n\tasync drawCard()\n\t{\n\t\tthis.doChecks(false);\n\n\t\tthis.lastCard = new Card ( await deckApiFetchJson(this.deckId + DRAWONE) );\n\t\treturn \n\t}\n}\n\n\n"]},"metadata":{},"sourceType":"module"}