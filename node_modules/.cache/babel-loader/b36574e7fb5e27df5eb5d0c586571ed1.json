{"ast":null,"code":"// TODO await timeouts?\nimport { assert } from './utils';\nimport Card from './Card';\nconst URLBASE = 'https://deckofcardsapi.com/api/deck/';\nconst SHUFFLEDDECK = 'new/shuffle/?deck_count=1';\nconst DRAWCARD = '/draw/?count=1';\nexport default class DeckAPI {\n  constructor() {\n    this.deckId = undefined;\n\n    this.doApiFetchJson = async (request) => {\n      let response = await fetch(URLBASE + request);\n      let json = await response.json();\n      if (!json.success) throw new Error(\"Fetch API Error - Bye!\");\n      return json;\n    };\n\n    this.doChecks = () => {\n      if (this.deckId === undefined) throw new Error(\"DeckOfCard - must call newDeck()\");\n    };\n\n    this.newDeck = async () => {\n      let json = await this.doApiFetchJson(SHUFFLEDDECK);\n      this.deckId = json.deck_id;\n      return this.deckId;\n    };\n\n    this.id = () => {\n      this.doChecks();\n      return this.deckId;\n    };\n\n    this.drawCard = async () => {\n      this.doChecks();\n      let jsonCards = await this.doApiFetchJson(this.deckId + DRAWCARD);\n      assert(this.deckId === jsonCards.deck_id, \"same deck\");\n      this.lastCard = new Card(jsonCards.cards[0]);\n      return this.lastCard;\n    };\n  }\n\n}","map":{"version":3,"sources":["/home/mark/GIT/GITHUB/react-card-game/src/DeckAPI.js"],"names":["assert","Card","URLBASE","SHUFFLEDDECK","DRAWCARD","DeckAPI","deckId","undefined","doApiFetchJson","request","response","fetch","json","success","Error","doChecks","newDeck","deck_id","id","drawCard","jsonCards","lastCard","cards"],"mappings":"AAAA;AACA,SAASA,MAAT,QAAuB,SAAvB;AAEA,OAAOC,IAAP,MAAiB,QAAjB;AAEA,MAAMC,OAAO,GAAK,sCAAlB;AACA,MAAMC,YAAY,GAAI,2BAAtB;AACA,MAAMC,QAAQ,GAAK,gBAAnB;AAEA,eAAe,MAAMC,OAAN,CACf;AAAA;AAAA,SACCC,MADD,GACUC,SADV;;AAAA,SAGCC,cAHD,GAGkB,OAAOC,OAAP,KACjB;AACC,UAAIC,QAAQ,GAAG,MAAMC,KAAK,CAACT,OAAO,GAAGO,OAAX,CAA1B;AACA,UAAIG,IAAI,GAAG,MAAMF,QAAQ,CAACE,IAAT,EAAjB;AAEA,UAAI,CAAEA,IAAI,CAACC,OAAX,EAAoB,MAAM,IAAIC,KAAJ,CAAU,wBAAV,CAAN;AAEpB,aAAOF,IAAP;AACA,KAXF;;AAAA,SAaCG,QAbD,GAaY,MACX;AACC,UAAK,KAAKT,MAAL,KAAgBC,SAArB,EACC,MAAM,IAAIO,KAAJ,CAAU,kCAAV,CAAN;AACD,KAjBF;;AAAA,SAmBCE,OAnBD,GAmBW,YACV;AACC,UAAIJ,IAAI,GAAG,MAAM,KAAKJ,cAAL,CAAoBL,YAApB,CAAjB;AACA,WAAKG,MAAL,GAAcM,IAAI,CAACK,OAAnB;AAEA,aAAO,KAAKX,MAAZ;AACA,KAzBF;;AAAA,SA2BCY,EA3BD,GA2BM,MACL;AACC,WAAKH,QAAL;AACA,aAAO,KAAKT,MAAZ;AACA,KA/BF;;AAAA,SAiCCa,QAjCD,GAiCY,YACX;AACC,WAAKJ,QAAL;AAEA,UAAIK,SAAS,GAAG,MAAM,KAAKZ,cAAL,CAAoB,KAAKF,MAAL,GAAcF,QAAlC,CAAtB;AACAJ,MAAAA,MAAM,CAAE,KAAKM,MAAL,KAAgBc,SAAS,CAACH,OAA5B,EAAqC,WAArC,CAAN;AAEA,WAAKI,QAAL,GAAgB,IAAIpB,IAAJ,CAAUmB,SAAS,CAACE,KAAV,CAAgB,CAAhB,CAAV,CAAhB;AACA,aAAO,KAAKD,QAAZ;AACA,KA1CF;AAAA;;AAAA","sourcesContent":["// TODO await timeouts?\nimport { assert } from './utils';\n\nimport Card from './Card';\n\nconst URLBASE \t\t= 'https://deckofcardsapi.com/api/deck/';\nconst SHUFFLEDDECK \t= 'new/shuffle/?deck_count=1';\nconst DRAWCARD \t\t= '/draw/?count=1';\n\nexport default class DeckAPI\n{\n\tdeckId = undefined;\n\n\tdoApiFetchJson = async (request) =>\n\t{\n\t\tlet response = await fetch(URLBASE + request);\n\t\tlet json = await response.json();\n\n\t\tif (! json.success) throw new Error(\"Fetch API Error - Bye!\");\n\t\t\n\t\treturn json;\n\t}\n\n\tdoChecks = ()  =>\n\t{\n\t\tif ( this.deckId === undefined )\n\t\t\tthrow new Error(\"DeckOfCard - must call newDeck()\");\n\t}\n\n\tnewDeck = async () =>\n\t{\n\t\tlet json = await this.doApiFetchJson(SHUFFLEDDECK);\n\t\tthis.deckId = json.deck_id;\n\t\t\n\t\treturn this.deckId;\n\t}\n\n\tid = () =>\n\t{\n\t\tthis.doChecks();\n\t\treturn this.deckId;\n\t}\n\n\tdrawCard = async () => \n\t{\n\t\tthis.doChecks();\n\n\t\tlet jsonCards = await this.doApiFetchJson(this.deckId + DRAWCARD);\n\t\tassert( this.deckId === jsonCards.deck_id, \"same deck\" );\n\n\t\tthis.lastCard = new Card (jsonCards.cards[0]);\n\t\treturn this.lastCard;\n\t}\n}\n\n"]},"metadata":{},"sourceType":"module"}