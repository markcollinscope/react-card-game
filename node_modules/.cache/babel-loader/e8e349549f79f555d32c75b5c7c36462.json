{"ast":null,"code":"// TODO import * as uts from './utils';\n// TODO await timeouts?\nimport Card from './Card';\nconst URLBASE = 'https://deckofcardsapi.com/api/deck/';\nconst SHUFFLEONE = 'new/shuffle/?deck_count=1';\nconst DRAWONE = '/draw/?count=1';\n\nconst deckApiFetchJson = async request => {\n  let response = await fetch(URLBASE + request);\n  let json = await response.json();\n  if (!json.success) throw new Error(\"Fetch API Error - Bye!\");\n  return json;\n};\n\nexport default class Deck {\n  constructor() {\n    this.deckId = undefined;\n    this.lastCard = undefined;\n\n    this.doChecks = (full = false) => {\n      if (this.deckId === undefined || full && this.lastCard === undefined) throw new Error(\"DeckOfCard - must request newDeck() and draw()\");\n    };\n\n    this.newDeck = async () => {\n      let json = await deckApiFetchJson(SHUFFLEONE);\n      this.deckId = json.deck_id; // console.log(\"newDeck:\", this.deckId, this.lastCard);\n\n      return this.deckId;\n    };\n\n    this.drawCard = async () => {\n      this.doChecks(false);\n      let jsonCard = await deckApiFetchJson(this.deckId + DRAWONE);\n      console.log(jsonCard);\n      this.lastCard = new Card(jsonCard);\n      return this.lastcard;\n    };\n  }\n\n}","map":{"version":3,"sources":["/home/mark/GIT/GITHUB/react-card-game/src/Deck.js"],"names":["Card","URLBASE","SHUFFLEONE","DRAWONE","deckApiFetchJson","request","response","fetch","json","success","Error","Deck","deckId","undefined","lastCard","doChecks","full","newDeck","deck_id","drawCard","jsonCard","console","log","lastcard"],"mappings":"AAAA;AACA;AAEA,OAAOA,IAAP,MAAiB,QAAjB;AAEA,MAAMC,OAAO,GAAK,sCAAlB;AACA,MAAMC,UAAU,GAAI,2BAApB;AACA,MAAMC,OAAO,GAAK,gBAAlB;;AAEA,MAAMC,gBAAgB,GAAG,MAAOC,OAAP,IACzB;AACC,MAAIC,QAAQ,GAAG,MAAMC,KAAK,CAACN,OAAO,GAAGI,OAAX,CAA1B;AACA,MAAIG,IAAI,GAAG,MAAMF,QAAQ,CAACE,IAAT,EAAjB;AAEA,MAAI,CAAEA,IAAI,CAACC,OAAX,EAAoB,MAAM,IAAIC,KAAJ,CAAU,wBAAV,CAAN;AAEpB,SAAOF,IAAP;AACA,CARD;;AAUA,eAAe,MAAMG,IAAN,CACf;AAAA;AAAA,SACCC,MADD,GACUC,SADV;AAAA,SAECC,QAFD,GAEYD,SAFZ;;AAAA,SAICE,QAJD,GAIY,CAACC,IAAI,GAAC,KAAN,KACX;AACC,UAAK,KAAKJ,MAAL,KAAgBC,SAAhB,IAA8BG,IAAI,IAAI,KAAKF,QAAL,KAAkBD,SAA7D,EACC,MAAM,IAAIH,KAAJ,CAAU,gDAAV,CAAN;AACD,KARF;;AAAA,SAUCO,OAVD,GAUW,YACV;AACC,UAAIT,IAAI,GAAG,MAAMJ,gBAAgB,CAACF,UAAD,CAAjC;AACA,WAAKU,MAAL,GAAcJ,IAAI,CAACU,OAAnB,CAFD,CAIC;;AAEA,aAAO,KAAKN,MAAZ;AACA,KAlBF;;AAAA,SAoBCO,QApBD,GAoBY,YACX;AACC,WAAKJ,QAAL,CAAc,KAAd;AAEA,UAAIK,QAAQ,GAAG,MAAMhB,gBAAgB,CAAC,KAAKQ,MAAL,GAAcT,OAAf,CAArC;AACAkB,MAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AAEA,WAAKN,QAAL,GAAgB,IAAId,IAAJ,CAAUoB,QAAV,CAAhB;AAEA,aAAO,KAAKG,QAAZ;AACA,KA9BF;AAAA;;AAAA","sourcesContent":["// TODO import * as uts from './utils';\n// TODO await timeouts?\n\nimport Card from './Card';\n\nconst URLBASE \t\t= 'https://deckofcardsapi.com/api/deck/';\nconst SHUFFLEONE \t= 'new/shuffle/?deck_count=1';\nconst DRAWONE \t\t= '/draw/?count=1';\n\nconst deckApiFetchJson = async (request) =>\n{\n\tlet response = await fetch(URLBASE + request);\n\tlet json = await response.json();\n\n\tif (! json.success) throw new Error(\"Fetch API Error - Bye!\");\n\t\n\treturn json;\n}\n\nexport default class Deck\n{\n\tdeckId = undefined;\n\tlastCard = undefined;\n\n\tdoChecks = (full=false)  =>\n\t{\n\t\tif ( this.deckId === undefined || (full && this.lastCard === undefined) )\n\t\t\tthrow new Error(\"DeckOfCard - must request newDeck() and draw()\");\n\t}\n\n\tnewDeck = async () =>\n\t{\n\t\tlet json = await deckApiFetchJson(SHUFFLEONE);\n\t\tthis.deckId = json.deck_id;\n\t\t\n\t\t// console.log(\"newDeck:\", this.deckId, this.lastCard);\n\t\n\t\treturn this.deckId;\n\t}\n\n\tdrawCard = async () =>\n\t{\n\t\tthis.doChecks(false);\n\n\t\tlet jsonCard = await deckApiFetchJson(this.deckId + DRAWONE);\n\t\tconsole.log(jsonCard);\n\t\t\n\t\tthis.lastCard = new Card (jsonCard);\n\n\t\treturn this.lastcard;\n\t}\n}\n\n"]},"metadata":{},"sourceType":"module"}