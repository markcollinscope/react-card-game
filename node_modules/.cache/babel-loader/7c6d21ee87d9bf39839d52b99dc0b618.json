{"ast":null,"code":"var _jsxFileName = \"/home/mark/GIT/GITHUB/react-card-game/src/App.jsx\";\n// Platform.\nimport React from 'react'; // Application\n\nimport GameEngine from './GameEngine'; // Interface\n\nimport './style.css';\nimport CardHandView from './CardHandView';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.game = undefined;\n\n    this.doStartGame = async () => {\n      await this.game.start();\n      this.setState({\n        canRender: true,\n        runningScore: 0,\n        gameOver: false\n      });\n    };\n\n    this.doEndGame = async () => {\n      let ncards = this.game.getNumberCards() - 1;\n      let newHighScore = Math.max(this.state.highScore, ncards);\n      this.setState({\n        highScore: newHighScore,\n        gameOver: true\n      });\n    };\n\n    this.handleDrawCardClick = async () => {\n      if (this.state.gameOver) {\n        await this.doStartGame();\n      } else {\n        await this.game.drawCard();\n        let isBust = this.game.isBust();\n        if (isBust) this.doEndGame();\n        this.setState({\n          runningScore: this.game.getTotal(),\n          gameOver: isBust\n        });\n      }\n    };\n\n    this.state = {\n      canRender: false,\n      runningScore: 0,\n      highScore: 0,\n      gameOver: false\n    };\n  }\n\n  async componentDidMount() {\n    this.game = new GameEngine();\n    await this.doStartGame();\n  }\n\n  render() {\n    if (!this.state.canRender) {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"cntr\",\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 20\n      }, this);\n    }\n\n    let buttonLabel = \"DRAW CARD\";\n    let currentScore = this.state.runningScore;\n\n    if (this.state.gameOver) {\n      buttonLabel = \"BUST - TRY AGAIN\";\n      currentScore = \"BUST\";\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"tar\",\n        children: [\"High Score: \", this.state.highScore, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"vgap\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(CardHandView, {\n        hand: this.game.getHand()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"vgap\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"cntr\",\n        children: [\" Current Score: \", currentScore]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"cntr\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn\",\n          onClick: this.handleDrawCardClick,\n          children: buttonLabel\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/mark/GIT/GITHUB/react-card-game/src/App.jsx"],"names":["React","GameEngine","CardHandView","App","Component","constructor","game","undefined","doStartGame","start","setState","canRender","runningScore","gameOver","doEndGame","ncards","getNumberCards","newHighScore","Math","max","state","highScore","handleDrawCardClick","drawCard","isBust","getTotal","componentDidMount","render","buttonLabel","currentScore","getHand"],"mappings":"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","sourcesContent":["// Platform.\nimport React from 'react';\n\n// Application\nimport GameEngine from './GameEngine';\n\n// Interface\nimport './style.css';\nimport CardHandView from './CardHandView';\n\nclass App extends React.Component {\n    game = undefined;\n\n    constructor() {\n        super();\n        this.state = { canRender: false, runningScore: 0, highScore: 0, gameOver: false };\n    }\n\n    async componentDidMount() {\n        this.game = new GameEngine();\n        await this.doStartGame();\n    }\n\n    doStartGame = async () => {\n        await this.game.start();\n        this.setState({ canRender: true, runningScore: 0, gameOver: false });\n    }\n\n    doEndGame = async () => {\n        let ncards = this.game.getNumberCards() - 1;\n        let newHighScore = Math.max(this.state.highScore, ncards);\n        this.setState({highScore: newHighScore, gameOver: true});\n    }\n\n    handleDrawCardClick = async () => {\n        if (this.state.gameOver) {\n            await this.doStartGame();\n        }\n        else {\n            await this.game.drawCard();\n            let isBust = this.game.isBust();\n\n            if (isBust) this.doEndGame();\n            this.setState({ runningScore: this.game.getTotal(), gameOver: isBust })\n        }\n    }\n\n    render() {\n        if (!this.state.canRender) {\n            return <p className=\"cntr\">Loading...</p>;\n        }\n\n        let buttonLabel = \"DRAW CARD\"\n        let currentScore = this.state.runningScore; \n\n        if (this.state.gameOver) {\n            buttonLabel = \"BUST - TRY AGAIN\";\n            currentScore = \"BUST\"\n        }\n\n        return (\n            <div>\n                <p className=\"tar\">High Score: {this.state.highScore} </p>\n                <div className=\"vgap\"/>\n                <CardHandView hand = { this.game.getHand() }/>\n                <div className=\"vgap\"/>\n                <p className=\"cntr\"> Current Score: { currentScore }</p>\n                <div className=\"cntr\">\n                    <button type=\"button\" className=\"btn\" onClick={this.handleDrawCardClick}>{buttonLabel}</button>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}