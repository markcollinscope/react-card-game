{"ast":null,"code":"var _jsxFileName = \"/home/mark/GIT/GITHUB/react-card-game/src/App.js\";\nimport React from 'react';\nimport Deck from './Deck';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.deck = undefined;\n\n    this.testDeck = async () => {\n      const MAX = 7;\n      let card = undefined;\n      console.log(\"testDeck - deckId: \", this.deck.id());\n\n      for (let i = 0; i < MAX; i++) {\n        card = await this.deck.drawCard();\n        console.log(\"CARD: \", i, card);\n      }\n    };\n\n    this.state = {\n      canRender: false,\n      deckId: undefined\n    };\n    this.deck = new Deck();\n  }\n\n  async componentDidMount() {\n    let id = await this.deck.newDeck();\n    this.setState({\n      canRender: true,\n      deckId: id\n    });\n    console.log(\"DID MOUNT: \", this.state.deckId);\n    await this.testDeck();\n  }\n\n  render() {\n    let msg = 'cannot render yet';\n    console.log(\"Rendering - canRender: \", this.state.canRender);\n\n    if (this.state.canRender) {\n      msg = this.state.deckId;\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"centre\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Hello World\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this), msg]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/mark/GIT/GITHUB/react-card-game/src/App.js"],"names":["React","Deck","App","Component","constructor","deck","undefined","testDeck","MAX","card","console","log","id","i","drawCard","state","canRender","deckId","componentDidMount","newDeck","setState","render","msg"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,IAAP,MAAiB,QAAjB;AAEA,OAAO,WAAP;;;AAEA,MAAMC,GAAN,SAAkBF,KAAK,CAACG,SAAxB,CAAkC;AAG9BC,EAAAA,WAAW,GAAG;AACV;AADU,SAFdC,IAEc,GAFPC,SAEO;;AAAA,SAcdC,QAdc,GAcH,YACX;AACI,YAAMC,GAAG,GAAC,CAAV;AACA,UAAIC,IAAI,GAAGH,SAAX;AAEAI,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmC,KAAKN,IAAL,CAAUO,EAAV,EAAnC;;AAEA,WAAK,IAAIC,CAAC,GAAC,CAAX,EAAcA,CAAC,GAACL,GAAhB,EAAqBK,CAAC,EAAtB,EAA0B;AACtBJ,QAAAA,IAAI,GAAG,MAAM,KAAKJ,IAAL,CAAUS,QAAV,EAAb;AACAJ,QAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBE,CAAtB,EAAyBJ,IAAzB;AACH;AACJ,KAzBa;;AAEV,SAAKM,KAAL,GAAa;AAAEC,MAAAA,SAAS,EAAE,KAAb;AAAoBC,MAAAA,MAAM,EAAEX;AAA5B,KAAb;AACA,SAAKD,IAAL,GAAY,IAAIJ,IAAJ,EAAZ;AACH;;AAEsB,QAAjBiB,iBAAiB,GAAG;AACtB,QAAIN,EAAE,GAAG,MAAM,KAAKP,IAAL,CAAUc,OAAV,EAAf;AAEA,SAAKC,QAAL,CAAc;AAAEJ,MAAAA,SAAS,EAAE,IAAb;AAAmBC,MAAAA,MAAM,EAAEL;AAA3B,KAAd;AACAF,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2B,KAAKI,KAAL,CAAWE,MAAtC;AACA,UAAM,KAAKV,QAAL,EAAN;AACH;;AAeDc,EAAAA,MAAM,GAAG;AACL,QAAIC,GAAG,GAAG,mBAAV;AAEAZ,IAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuC,KAAKI,KAAL,CAAWC,SAAlD;;AAEA,QAAI,KAAKD,KAAL,CAAWC,SAAf,EAA0B;AACtBM,MAAAA,GAAG,GAAG,KAAKP,KAAL,CAAWE,MAAjB;AACH;;AAED,wBACI;AAAM,MAAA,SAAS,EAAC,QAAhB;AAAA,8BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,EAEMK,GAFN;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAMH;;AA7C6B;;AAgDlC,eAAepB,GAAf","sourcesContent":["import React from 'react';\n\nimport Deck from './Deck';\n\nimport './App.css';\n\nclass App extends React.Component {\n    deck = undefined;\n\n    constructor() {\n        super();\n        this.state = { canRender: false, deckId: undefined };\n        this.deck = new Deck();\n    }\n\n    async componentDidMount() {\n        let id = await this.deck.newDeck();\n\n        this.setState({ canRender: true, deckId: id });\n        console.log(\"DID MOUNT: \", this.state.deckId);\n        await this.testDeck();\n    }\n\n    testDeck = async () =>\n    {\n        const MAX=7;\n        let card = undefined;\n\n        console.log(\"testDeck - deckId: \", this.deck.id())\n\n        for (let i=0; i<MAX; i++) {\n            card = await this.deck.drawCard();\n            console.log(\"CARD: \", i, card);\n        }\n    }\n\n    render() {\n        let msg = 'cannot render yet';\n\n        console.log(\"Rendering - canRender: \", this.state.canRender)\n        \n        if (this.state.canRender) {\n            msg = this.state.deckId;\n        }\n\n        return (\n            <div  className=\"centre\">\n                <p>Hello World</p>\n                { msg }\n            </div>\n        );\n    }\n}\n\nexport default App;\n "]},"metadata":{},"sourceType":"module"}