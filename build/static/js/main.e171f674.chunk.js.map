{"version":3,"sources":["utils.js","Card.js","Deck.js","App.js","index.js"],"names":["assert","value","Error","Card","c","image","suit","code","numericValue","values","this","uts","deckApiFetchJson","request","a","fetch","response","json","success","Deck","deckId","undefined","lastCard","doChecks","full","newDeck","deck_id","drawCard","lastcard","App","deck","testDeck","MAX","dref","console","log","i","card","state","canRender","id","setState","msg","className","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2LAEaA,EAAS,SAACC,GAEtB,IAAMA,EAAQ,MAAM,IAAIC,MAAM,oBAAqBD,GACnD,OAAOA,GCFKE,EAkBZ,WAAYC,GACX,IAAD,gCAOAC,MAAQ,kBAAM,EAAKA,OAPnB,KAQAJ,MAAQ,kBAAM,EAAKA,OARnB,KASAK,KAAO,kBAAM,EAAKA,MATlB,KAUAC,KAAO,kBAAM,EAAKA,MAVlB,KAWAC,aAAe,WAAQ,OAAOL,EAAKM,OAAO,EAAKR,QAV9CS,KAAKL,MAAQM,EAAWP,EAAEC,OACpBK,KAAKT,MAAQU,EAAWP,EAAEH,OAC1BS,KAAKJ,KAAOK,EAAWP,EAAEE,MACzBI,KAAKH,KAAOI,EAAWP,EAAEG,OAvBpBJ,EAELM,OAAS,CACf,EAAK,EACL,EAAK,EACL,EAAK,EACL,EAAK,EACL,EAAK,EACL,EAAK,EACL,EAAK,EACL,EAAK,EACL,EAAK,GACL,KAAQ,GACR,MAAS,GACT,KAAQ,GACR,IAAO,IAkBMN,QC3BTS,EAAgB,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,sEAEHC,MANJ,uCAMoBF,GAFb,cAEpBG,EAFoB,gBAGPA,EAASC,OAHF,WAGpBA,EAHoB,QAKbC,QALa,sBAKE,IAAIhB,MAAM,0BALZ,gCAOjBe,GAPiB,2CAAH,sDAUDE,E,iDAEpBC,YAASC,E,KACTC,cAAWD,E,KAEXE,SAAW,WACV,IADWC,EACZ,wDACC,QAAqBH,IAAhB,EAAKD,QAAyBI,QAA0BH,IAAlB,EAAKC,SAC/C,MAAM,IAAIpB,MAAM,mD,KAGlBuB,Q,sBAAU,4BAAAX,EAAA,sEAEQF,EA1BC,6BAwBT,cAELK,EAFK,OAGT,EAAKG,OAASH,EAAKS,QAHV,kBAOF,EAAKN,QAPH,2C,KAUVO,S,sBAAW,sBAAAb,EAAA,6DAEV,EAAKS,UAAS,GAFJ,KAIUpB,EAJV,SAIuBS,EAAiB,EAAKQ,OArCvC,kBAiCN,0BAIV,EAAKE,SAJK,iCAKH,EAAKM,UALF,4C,OCYGC,E,kDA7CX,aAAe,IAAD,8BACV,gBAHJC,UAAOT,EAEO,EAcdU,SAdc,sBAcH,kCAAAjB,EAAA,6DAEDkB,EAAI,GAFH,SAGY,EAAKF,KAAKL,UAHtB,OAGDQ,EAHC,OAIPC,QAAQC,IAAI,SAAUF,GAEbG,EAAE,EANJ,YAMOA,EAAEJ,GANT,iCAOc,EAAKF,KAAKH,WAPxB,OAOCU,EAPD,OAQHH,QAAQC,IAAIE,GART,QAMcD,IANd,2DAZP,EAAKE,MAAQ,CAAEC,WAAW,EAAOnB,YAAQC,GAF/B,E,4FAKd,4BAAAP,EAAA,6DACIJ,KAAKoB,KAAO,IAAIX,EADpB,SAEmBT,KAAKoB,KAAKL,UAF7B,OAEQe,EAFR,OAGI9B,KAAK+B,SAAS,CAAEF,WAAW,EAAMnB,OAAQoB,IAEzCN,QAAQC,IAAI,cAAezB,KAAK4B,MAAMlB,QAL1C,gD,0EAqBA,WACI,IAAIsB,EAAM,gBASV,OAPAR,QAAQC,IAAI,0BAA2BzB,KAAK4B,MAAMC,WAE9C7B,KAAK4B,MAAMC,YACXL,QAAQC,IAAI,gBACZO,EAAMhC,KAAK4B,MAAMlB,QAIjB,sBAAKuB,UAAU,MAAf,UACI,4CACED,S,GA1CAE,IAAMC,WCAxBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.e171f674.chunk.js","sourcesContent":["// general purpose utilities...\n\nexport const assert = (value) => \n{\n\tif ( !value ) throw new Error(\"Assertion Error: \", value);\n\treturn value;\n}\n","// card, converts to numeric value in game.\nimport * as uts from './utils';\n\nexport class Card \n{\n\tstatic values = {\n\t\t\"2\": 2,\n\t\t\"3\": 3,\n\t\t\"4\": 4,\n\t\t\"5\": 5,\n\t\t\"6\": 6,\n\t\t\"7\": 7,\n\t\t\"8\": 8,\n\t\t\"9\": 9,\n\t\t\"0\": 10,\n\t\t\"JACK\": 10,\n\t\t\"QUEEN\": 10,\n\t\t\"KING\": 10, \n\t\t\"ACE\": 11\n\t};\n\n\tconstructor(c)\n\t{\n\t\tthis.image = uts.assert(c.image);\n        this.value = uts.assert(c.value);\n        this.suit = uts.assert(c.suit);\n        this.code = uts.assert(c.code);\n\t}\n\n\timage = () => this.image;\n\tvalue = () => this.value;\n\tsuit = () => this.suit;\n\tcode = () => this.code;\n\tnumericValue = () => { return Card.values[this.value]; }\n}\n\nexport default Card;","// TODO import * as uts from './utils';\n// TODO await timeouts?\n\nimport Card from './Card';\n\nconst URLBASE \t\t= 'https://deckofcardsapi.com/api/deck/';\nconst SHUFFLEONE \t= 'new/shuffle/?deck_count=1';\nconst DRAWONE \t\t= '/draw/?count=1';\n\nconst deckApiFetchJson = async (request) =>\n{\n\tlet response = await fetch(URLBASE + request);\n\tlet json = await response.json();\n\n\tif (! json.success) throw new Error(\"Fetch API Error - Bye!\");\n\t\n\treturn json;\n}\n\nexport default class Deck\n{\n\tdeckId = undefined;\n\tlastCard = undefined;\n\n\tdoChecks = (full=false)  =>\n\t{\n\t\tif ( this.deckId === undefined || (full && this.lastCard === undefined) )\n\t\t\tthrow new Error(\"DeckOfCard - must request newDeck() and draw()\");\n\t}\n\n\tnewDeck = async () =>\n\t{\n\t\tlet json = await deckApiFetchJson(SHUFFLEONE);\n\t\tthis.deckId = json.deck_id;\n\t\t\n\t\t// console.log(\"newDeck:\", this.deckId, this.lastCard);\n\t\n\t\treturn this.deckId;\n\t}\n\n\tdrawCard = async () =>\n\t{\n\t\tthis.doChecks(false);\n\n\t\tthis.lastCard = new Card ( await deckApiFetchJson(this.deckId + DRAWONE) );\n\t\treturn this.lastcard;\n\t}\n}\n\n","import React from 'react';\n\nimport Deck from './Deck';\n\nclass App extends React.Component {\n    deck = undefined;\n\n    constructor() {\n        super();\n        this.state = { canRender: false, deckId: undefined };\n    }\n\n    async componentDidMount() {\n        this.deck = new Deck();\n        let id = await this.deck.newDeck();\n        this.setState({ canRender: true, deckId: id })\n\n        console.log(\"DID MOUNT: \", this.state.deckId)\n\n    }\n\n    testDeck = async () =>\n    {\n        const MAX=20;\n        const dref = await this.deck.newDeck();\n        console.log(\"dref: \", dref);\n\n        for (let i=0; i<MAX; i++) {\n            let card = await this.deck.drawCard();\n            console.log(card);\n        }\n    }\n\n    render() {\n        let msg = 'Nothing Here!';\n\n        console.log(\"Rendering - canRender: \", this.state.canRender)\n        \n        if (this.state.canRender) {\n            console.log(\"Updating MSG\");\n            msg = this.state.deckId;\n        }\n\n        return (\n            <div className=\"App\">\n                <p>Hello World</p>\n                { msg }\n            </div>\n        );\n    }\n}\n\nexport default App;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}